# -*- coding: utf-8 -*-
"""dynamic_programming.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VEg7noYZdn5NB8g7n-XJNbWsHhwt8XZk
"""

from functools import lru_cache

def naive_fib(n):
  # Calculates the nth fibonacci number with the naive method
  if n == 1 or n == 0:
    return 1
  else:
    return naive_fib(n-1) + naive_fib(n-2)

@lru_cache(maxsize=1000)
def memoized_fib(n):
  # Calculates the nth fibonacci number with memoization
  if n == 1 or n == 0:
    return 1
  else:
    return memoized_fib(n-1) + memoized_fib(n-2)

def bottom_up_fib(n):
  # Calculates nth fibonacci number using bottom up approach
  fib = [1,1]
  if n == 0 or n == 1:
    return 1
  else:
    i = 2
    while i <= n:
      fib.append(fib[i-1] + fib[i-2])
      i += 1
    return fib[n]